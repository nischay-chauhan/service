/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Chapter as PrismaChapter,
  Story as PrismaStory,
} from "@prisma/client";

export class ChapterServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ChapterCountArgs, "select">): Promise<number> {
    return this.prisma.chapter.count(args);
  }

  async chapters(args: Prisma.ChapterFindManyArgs): Promise<PrismaChapter[]> {
    return this.prisma.chapter.findMany(args);
  }
  async chapter(
    args: Prisma.ChapterFindUniqueArgs
  ): Promise<PrismaChapter | null> {
    return this.prisma.chapter.findUnique(args);
  }
  async createChapter(args: Prisma.ChapterCreateArgs): Promise<PrismaChapter> {
    return this.prisma.chapter.create(args);
  }
  async updateChapter(args: Prisma.ChapterUpdateArgs): Promise<PrismaChapter> {
    return this.prisma.chapter.update(args);
  }
  async deleteChapter(args: Prisma.ChapterDeleteArgs): Promise<PrismaChapter> {
    return this.prisma.chapter.delete(args);
  }

  async getStory(parentId: string): Promise<PrismaStory | null> {
    return this.prisma.chapter
      .findUnique({
        where: { id: parentId },
      })
      .story();
  }
}
